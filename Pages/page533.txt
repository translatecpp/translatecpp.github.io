Section 105.1: Categorization of argument to parameter cost
Overload resolution partitions the cost of passing an argument to a parameter into one of four different
categorizes, called "sequences". Each sequence may include zero, one or several conversions
    • Standard conversion sequence
      void f(int a); f(42);
    • User defined conversion sequence
      void f(std::string s); f("hello");
    • Ellipsis conversion sequence
      void f(...); f(42);
    • List initialization sequence
      void f(std::vector<int> v); f({1, 2, 3});
The general principle is that Standard conversion sequences are the cheapest, followed by user defined conversion
sequences, followed by ellipsis conversion sequences.
A special case is the list initialization sequence, which does not constitute a conversion (an initializer list is not an
expression with a type). Its cost is determined by defining it to be equivalent to one of the other three conversion
sequences, depending on the parameter type and form of initializer list.
Section 105.2: Arithmetic promotions and conversions
Converting an integer type to the corresponding promoted type is better than converting it to some other integer
type.
void f(int x);
void f(short x);
signed char c = 42;
f(c); // calls f(int); promotion to int is better than conversion to short
short s = 42;
f(s); // calls f(short); exact match is better than promotion to int
Promoting a float to double is better than converting it to some other floating point type.
void f(double x);
void f(long double x);
f(3.14f); // calls f(double); promotion to double is better than conversion to long double
Arithmetic conversions other than promotions are neither better nor worse than each other.
void f(float x);
void f(long double x);
f(3.14); // ambiguous