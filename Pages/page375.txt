due to memory running out when copying the exception string, I/O streams might throw during logging with
respective exception masks set, etc.
Section 72.4: Custom exception
You shouldn't throw raw values as exceptions, instead use one of the standard exception classes or make your
own.
Having your own exception class inherited from std —exception is a good way to go about it. Here's a custom
exception class which directly inherits from std —exception:
#include <exception>
class Except: virtual public std::exception {
     /**  Constructor (C++ STL  string, int, int).
      *  @param  msg The error  message
      *  @param  err_num Error  number
      *  @param  err_off Error  offset
      */
     explicit
     Except(const std::string& msg, int err_num, int err_off):
         error_number(err_num),
         error_offset(err_off),
         error_message(msg)
         {}
     /** Destructor.
      *  Virtual to allow for subclassing.
      */
     virtual ~Except() throw () {}
     /** Returns a pointer to the (constant) error description.
      * @return A pointer to a const char*. The underlying memory
      *  is in possession of the Except object. Callers must
      *  not attempt to free the memory.
      */
     virtual const char* what() const throw () {
         return error_message.c_str();
     }
     /** Returns error number.
      *  @return #error_number
      */
     virtual int getErrorNumber() const throw() {
         return error_number;
     }
     /**Returns error offset.
      *  @return #error_offset
      */
     virtual int getErrorOffset() const throw() {
protected:
     int error_number;
     int error_offset;
     std::string error_message;
///< Error number
///< Error offset
///< Error message
public: