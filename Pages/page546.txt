For this, we will have to overload operator =, not so that it takes an lvalue reference, like in copy assignment, but
so that it takes an rvalue reference.
class A {
      int a;
      A& operator= (A&& other) {
          this->a = other.a;
          other.a = 0;
          return *this;
      }
};
This is the typical syntax to define move assignment. We overload operator = so that we can feed it an rvalue
reference and it can assign it to another object.
A a;
a.a = 1;
A b;
b = std::move(a); //calling A& operator= (A&& other)
std::cout << a.a << std::endl; //0
std::cout << b.a << std::endl; //1
Thus, we can move assign an object to another one.
Section 106.6: Using move semantics on containers
You can move a container instead of copying it:
void print(const std::vector<int>& vec) {
     for (auto&& val : vec) {
         std::cout << val << ", ";
     }
     std::cout << std::endl;
}
int main() {
     // initialize vec1 with 1, 2, 3, 4 and vec2 as an empty vector
     std::vector<int> vec1{1, 2, 3, 4};
     std::vector<int> vec2;
     // The following line will print 1, 2, 3, 4
     print(vec1);
     // The following line will print a new line
     print(vec2);
     // The vector vec2 is assigned with move assingment.
     // This will "steal" the value of vec1 without copying it.
     vec2 = std::move(vec1);
     // Here the vec1 object is in an indeterminate state, but still valid.
     // The object vec1 is not destroyed,
     // but there's is no guarantees about what it contains.
     // The following line will print 1, 2, 3, 4
     print(vec2);
}