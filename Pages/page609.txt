     // connect() call tries to establish a TCP connection to the specified server
     int connectR = connect(sockFD, p->ai_addr, p->ai_addrlen);
     if (connectR == -1) {
     close(sockFD);
         std::cerr << "Error while connecting socket\n";
         return -5;
     }
     std::string reply(15, ' ');
     // recv() call tries to get the response from server
     // BUT there's a catch here, the response might take multiple calls
     // to recv() before it is completely received
     // will be demonstrated in another example to keep this minimal
     auto bytes_recv = recv(sockFD, &reply.front(), reply.size(), 0);
     if (bytes_recv == -1) {
         std::cerr << "Error while receiving bytes\n";
         return -6;
     }
     std::cout << "\nClient recieved: " << reply << std::endl;
     close(sockFD);
     freeaddrinfo(p);
     return 0;
}
Section 127.2: Hello TCP Server
Let me start by saying you should first visit Beej's Guide to Network Programming and give it a quick read, which
explains most of this stuff a bit more verbosely. We'll be creating a simple TCP server here which will say "Hello
World" to all incoming connections and then close them. Another thing to note is, the server will be communicating
to clients iteratively, which means one client at a time. Make sure to check out relevant man pages as they might
contain valuable information about each function call and socket structures.
We'll run the server with a port, so we'll take an argument for port number as well. Let's get started with code -
#include <cstring> // sizeof()
#include <iostream>
#include <string>
// headers for socket(), getaddrinfo() and friends
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h> // close()
int main(int argc, char *argv[])
{
     // Let's check if port number is supplied or not..
     if (argc != 2) {
         std::cerr << "Run program as 'program <port>'\n";
         return -1;
     }
     auto &portNum = argv[1];
     const unsigned int backLog = 8;    // number of connections allowed on the incoming queue