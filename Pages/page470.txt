Type erasure is a set of techniques for creating a type that can provide a uniform interface to various underlying
types, while hiding the underlying type information from the client. std ::function<R(A...)>, which has the ability
to hold callable objects of various types, is perhaps the best known example of type erasure in C++.
Section 90.1: A move-only 'std::function'
std ::function type erases down to a few operations. One of the things it requires is that the stored value be
copyable.
This causes problems in a few contexts, like lambdas storing unique ptrs. If you are using the std — function in a
context where copying doesn't matter, like a thread pool where you dispatch tasks to threads, this requirement can
add overhead.
In particular, std ::packaged_task<Sig> is a callable object that is move-only. You can store a
std ::packaged_task<R(Args...)> in a std ::packaged_task<void(Args...)>, but that is a pretty heavy-weight and
obscure way to create a move-only callable type-erasure class.
Thus the task. This demonstrates how you could write a simple std — function type. I omitted the copy constructor
(which would involve adding a clone method to details ::task_pimpl< ...> as well).
template<class Sig>
struct task;
// putting it in a namespace allows us to specialize it nicely for void return value:
namespace details {
   template<class R, class...Args>
   struct task_pimpl {
     virtual R invoke(Args&&...args) const = 0;
     virtual ~task_pimpl() {};
     virtual const std::type_info& target_type() const = 0;
   };
   // store an F. invoke(Args&&...) calls the f
   template<class F, class R, class...Args>
   struct task_pimpl_impl:task_pimpl<R,Args...> {
     F f;
     template<class Fin>
     task_pimpl_impl( Fin&& fin ):f(std::forward<Fin>(fin)) {}
     virtual R invoke(Args&&...args) const final override {
     return f(std::forward<Args>(args)...);
     }
     virtual const std::type_info& target_type() const final override {
       return typeid(F);
     }
   };
   // the void version discards the return value of f:
   template<class F, class...Args>
   struct task_pimpl_impl<F,void,Args...>:task_pimpl<void,Args...> {
     F f;
     template<class Fin>
     task_pimpl_impl( Fin&& fin ):f(std::forward<Fin>(fin)) {}
     virtual void invoke(Args&&...args) const final override {
     f(std ::forward<Args>(args)...);
     }