int x;
f(x); // both overloads match exactly, but f(int&) is still better
const int y = 42;
f(y); // only f(const int&) is viable
This rule applies to const-qualified member functions as well, where it is important for allowing mutable access to
non-const objects and immutable access to const objects.
class IntVector {
   public:
      // ...
      int* data() { return m_data; }
   const int* data() const { return m_data; }
   private:
      // ...
    int* m_data;
};
IntVector v1;
int* data1 = v1.data();
const IntVector v2;
const int* data2 = v2.data();
// Vector::data() is better than Vector::data() const;
// data1 can be used to modify the vector's data
// only Vector::data() const is viable;
// data2 can't be used to modify the vector's data
In the same way, a volatile overload will be less preferred than a non-volatile overload.
class AtomicInt {
   public:
     // ...
   int load();
   int load() volatile;
   private:
     // ...
};
AtomicInt a1 ;
a1.load(); // non-volatile overload preferred; no side effect
volatile AtomicInt a2;
a2.load(); // only volatile overload is viable; side effect
static_cast<volatile AtomicInt&>(a1).load(); // force volatile semantics for a1
Section 105.6: Name lookup and access checking
Overload resolution occurs after name lookup. This means that a better-matching function will not be selected by
overload resolution if it loses name lookup:
void f(int x);
struct S {
     void f(double x);
     void g() { f(42); } // calls S::f because global f is not visible here,
                          // even though it would be a better match
};
Overload resolution occurs before access checking. An inaccessible function might be selected by overload
resolution if it is a better match than an accessible function.
                                                                                                                class C {
                                                                                                                public:
      static void f(double x);