     Circle (const Point& center, double radius)
         : center(center), radius(radius) {}
     double get_surface() const override { return r * r * M_PI; }
     // this is only for circles. Makes no sense for other shapes
     double get_diameter() const { return 2 * r; }
};
The get_diameter() member function only exist for circles. It was not defined for a Shape object:
Shape* ps = get_any_shape( );
ps->get_diameter(); // OUCH !!! Compilation error
How to downcast ?
If you'd know for sure that ps points to a circle you could opt for a static_cast:
std::cout << "Diameter: " << static_cast<Circle*>(ps)->get_diameter() << std::endl;
This will do the trick. But it's very risky: if ps appears to by anything else than a Circle the behavior of your code
will be undefined.
So rather than playing Russian roulette, you should safely use a dynamic_cast. This is specifically for polymorphic
classes :
int main() {
     Circle circle(Point(0.0, 0.0), 10);
     Shape &shape = circle;
     std::cout << "The shape has a surface of " << shape.get_surface() << std::endl;
     //shape.get_diameter(); // OUCH !!! Compilation error
     Circle *pc = dynamic_cast<Circle*>(&shape); // will be nullptr if ps wasn't a circle
     if (pc)
         std::cout << "The shape is a circle of diameter " << pc->get_diameter() << std::endl;
     else
         std::cout << "The shape isn't a circle !" << std::endl;
}
Note that dynamic_cast is not possible on a class that is not polymorphic. You'd need at least one virtual function in
the class or its parents to be able to use it.
Section 26.3: Polymorphism & Destructors
If a class is intended to be used polymorphically, with derived instances being stored as base pointers/references,
its base class' destructor should be either virtual or protected. In the former case, this will cause object
destruction to check the vtable, automatically calling the correct destructor based on the dynamic type. In the
latter case, destroying the object through a base class pointer/reference is disabled, and the object can only be
deleted when explicitly treated as its actual type.
struct VirtualDestructor {
     virtual ~VirtualDestructor() = default;
};
struct VirtualDerived : VirtualDestructor {};