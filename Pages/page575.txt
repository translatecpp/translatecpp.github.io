     std::wstring_convert<std::codecvt_utf8_utf16<char16_t>, char16_t> utf16conv;
     std::cout << utf16conv.to_bytes(s16) << std::endl;
     std::wstring_convert<std::codecvt_utf8_utf16<char32_t>, char32_t> utf32conv;
     std::cout << utf32conv.to_bytes(s32) << std::endl;
     std::wcout << ws << std::endl;
}
Note:
Literal string may containing \0
std::string s1 = "foo\0\0bar"; // constructor from C-string: results in "foo"s
std::string s2 = "foo\0\0bar"s; // That string contains 2 '\0' in its middle
Section 114.5: Standard user-defined literals for complex
Version > C++14
Those following complex user literals are declared in the namespace std ::literals ::complex_literals, where
both literals and complex_literals are inline namespaces. Access to these operators can be gained with using
namespace std::literals, using namespace std::complex_literals, and using namespace
std ::literals::complex_literals.
#include <complex>
#include <iostream>
int main()
{
     using namespace std::literals::complex_literals;
     std::complex<double> c = 2.0 + 1i;        // {2.0, 1.}
     std::complex<float> cf = 2.0f + 1if;      // {2.0f, 1.f}
     std::complex<long double> cl = 2.0L + 1il; // {2.0L, 1.L}
std: :cout << "abs" << c << " = " << abs(c) << std::  endl;   // abs(2, 1) = 2.23607 
std: :cout << "abs" << cf <<  " = " << abs(cf) << std ::endl; // abs(2, 1) = 2.23607 
std: :cout << "abs" << cl <<  " = " << abs(cl) << std ::endl; // abs(2, 1) = 2.23607 
}