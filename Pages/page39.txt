void test(BidirIt a, std::bidirectional_iterator_tag) {
     std::cout << "Bidirectional iterator is used" << std::endl;
}
template<class ForwIt>
void test(ForwIt a, std::forward_iterator_tag) {
     std::cout << "Forward iterator is used" << std::endl;
}
template<class Iter>
void test(Iter a) {
     test(a, typename std::iterator_traits<Iter>::iterator_category());
}
Categories of iterators are basically iterators concepts, except Contiguous Iterators don't have their own tag, since it
was found to break code.
Section 10.2: Vector Iterator
begin returns an iterator to the first element in the sequence container.
end returns an iterator to the first element past the end.
If the vector object is const, both begin and end return a const_iterator. If you want a const_iterator to be
returned even if your vector is not const, you can use cbegin and cend.
Example:
#include <vector>
#include <iostream>
int main() {
     std::vector<int> v = { 1, 2, 3, 4, 5 }; //intialize vector using an initializer_list
     for (std::vector<int>::iterator it = v.begin(); it != v.end(); ++it) {
         std::cout << *it << " ";
     }
     return 0;
}
Output:
           1 2 3 4 5
Section 10.3: Map Iterator
An iterator to the first element in the container.
If a map object is const-qualified, the function returns a const_iterator. Otherwise, it returns an iterator.
// Create a map and insert some values
std::map<char,int> mymap;
mymap['b'] = 100;
mymap['a'] = 200;
mymap['c'] = 300;