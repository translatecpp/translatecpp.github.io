In the above code, if f were changed to extern and g to non-extern, it would not affect the correctness or
semantics of the program at all, but would likely confuse the reader of the code.
Section 133.2: register
Version < C++17
A storage class specifier that hints to the compiler that a variable will be heavily used. The word "register" is related
to the fact that a compiler might choose to store such a variable in a CPU register so that it can be accessed in fewer
clock cycles. It was deprecated starting in C++11.
register int i = 0;
while (i < 100) {
      f(i);
      int g = i*i;
      i += h(i, g);
}
Both local variables and function parameters may be declared register. Unlike C, C++ does not place any
restrictions on what can be done with a register variable. For example, it is valid to take the address of a register
variable, but this may prevent the compiler from actually storing such a variable in a register.
Version > C++17
The keyword register is unused and reserved. A program that uses the keyword register is ill-formed.
Section 133.3: static
The static storage class specifier has three different meanings.
   1. Gives internal linkage to a variable or function declared at namespace scope.
       // internal function; can't be linked to
       static double semiperimeter(double a, double b, double c) {
           return (a + b + c)/2.0;
       }
       // exported to client
       double area(double a, double b, double c) {
           const double s = semiperimeter(a, b, c);
           return sqrt(s*(s-a)*(s-b)*(s-c));
       }
   2.  Declares a variable to have static storage duration (unless it is thread_local). Namespace-scope variables
      are implicitly static. A static local variable is initialized only once, the first time control passes through its
      definition, and is not destroyed every time its scope is exited.
       void f() {
           static int count = 0;
           std::cout << "f has been called " << ++count << " times so far\n";
       }
   3.  When applied to the declaration of a class member, declares that member to be a static member.
       struct S {
           static S* create() {