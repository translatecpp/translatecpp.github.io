Section 32.1: Pointers to static member functions
A static member function is just like an ordinary C/C++ function, except with scope:
    • It is inside a class, so it needs its name decorated with the class name;
    • It has accessibility, with public, protected or private.
So, if you have access to the static member function and decorate it correctly, then you can point to the function
like any normal function outside a class:
typedef int Fn(int); // Fn is a type-of function that accepts an int and returns an int
// Note that MyFn() is of type 'Fn'
int MyFn(int i) { return 2*i; }
class Class {
public:
     // Note that Static() is of type 'Fn'
     static int Static(int i) { return 3*i; }
}; // Class
int main() {
     Fn *fn; // fn is a pointer to a type-of Fn
     fn = &MyFn;         //  Point to one function
     fn(3);              //   Call it
     fn = &Class::Static; // Point to the other function
     fn(4);              //   Call it
  } // main()
Section 32.2: Pointers to member functions
To access a member function of a class, you need to have a "handle" to the particular instance, as either the
instance itself, or a pointer or reference to it. Given a class instance, you can point to various of its members with a
pointer-to-member, IF you get the syntax correct! Of course, the pointer has to be declared to be of the same type
as what you are pointing to...
typedef int Fn(int); // Fn is a type-of function that accepts an int and returns an int
class Class {
public:
     // Note that A() is of type 'Fn'
     int A(int a) { return 2*a; }
     // Note that B() is of type 'Fn'
     int B(int b) { return 3*b; }
}; // Class
int main() {
     Class c;           // Need a Class instance to play with
     Class *p = &c;     // Need a Class pointer to play with
     Fn Class::*fn;     // fn is a pointer to a type-of Fn within Class
     fn = &Class::A;    // fn now points to A within any Class
     (c.*fn)(5);        // Pass 5 to c's function A (via fn)