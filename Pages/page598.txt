Section 123.1: [[fallthrough]]
Version > C++17
Whenever a case is ended in a switch, the code of the next case will get executed. This last one can be prevented
by using the 'break' statement. As this so-called fallthrough behavior can introduce bugs when not intended,
several compilers and static analyzers give a warning on this.
From C++17 on, a standard attribute was introduced to indicate that the warning is not needed when the code is
meant to fall through. Compilers can safely give warnings when a case is ended without break or [ [fallthrough] ]
and has at least one statement.
switch(input) {
      case 2011:
      case 2014:
      case 2017:
          std::cout << "Using modern C++" << std::endl;
          [[fallthrough]]; // > No warning
      case 1998:
      case 2003:
          standard = input;
}
See the proposal for more detailed examples on how [ [fallthrough] ] can be used.
Section 123.2: [[nodiscard]]
Version > C++17
The [ [nodiscard] ] attribute can be used to indicate that the return value of a function shouldn't be ignored when
you do a function call. If the return value is ignored, the compiler should give a warning on this. The attribute can be
added to:
     •  A function definition
     •  A type
Adding the attribute to a type has the same behaviour as adding the attribute to every single function which returns
this type.
template<typename Function>
[[nodiscard]] Finally<std::decay_t<Function>> onExit(Function &&f);
void f(int &i) {
assert(i == 0);                    // 
++i;                               // 
auto exit1 = onExit([&i]{ --i; }); // 
++i;                               // 
onExit([&i]{ --i; });              // 
                                   // 
std::cout << i << std::end;        // 
}
Just to make comments clear!
i == 1
Reduce by 1 on exiting f()
i == 2
BUG: Reducing by 1 directly
     Compiler warning expected
Expected: 2, Real: 1
See the proposal for more detailed examples on how [ [nodiscard] ] can be used.