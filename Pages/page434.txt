     return 0;
Section 80.2: Passing a reference to a thread
You cannot pass a reference (or const reference) directly to a thread because std ::thread will copy/move them.
Instead, use std::reference_wrapper:
void foo(int& b)
{
     b = 10;
}
int a = 1;
std::thread thread{ foo, std::ref(a) }; //'a' is now really passed as reference
thread.join();
std::cout << a << '\n'; //Outputs 10
void bar(const ComplexObject& co)
{
     co.doCalculations();
}
ComplexObject object;
std::thread thread{ bar, std::cref(object) }; //'object' is passed as const&
thread.join();
std::cout << object.getResult() << '\n'; //Outputs the result
Section 80.3: Using std::async instead of std::thread
std ::async is also able to make threads. Compared to std ::thread it is considered less powerful but easier to use
when you just want to run a function asynchronously.
Asynchronously calling a function
#include <future>
#include <iostream>
unsigned int square(unsigned int i){
     return i*i;
}
int main() {
     auto f = std::async(std::launch::async, square, 8);
     std::cout << "square currently running\n"; //do something while square is running
     std::cout << "result is " << f.get() << '\n'; //getting the result from square
}
Common Pitfalls
    • std ::async returns a std ::future that holds the return value that will be calculated by the function. When
     that future gets destroyed it waits until the thread completes, making your code effectively single threaded.
     This is easily overlooked when you don't need the return value:
       std::async(std::launch::async, square, 5);
       //thread already completed at this point, because the returning future got destroyed
          • std ::async works without a launch policy, so std ::async(square, 5); compiles. When you do that the