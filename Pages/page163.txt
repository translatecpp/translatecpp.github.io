In the following example instances of std ::weak_ptr are used so that the destruction of a tree object is not
inhibited:
#include <memory>
#include <vector>
struct TreeNode {
     std::weak_ptr<TreeNode> parent;
     std::vector< std::shared_ptr<TreeNode> > children;
};
int main() {
     // Create a TreeNode to serve as the root/parent.
     std::shared_ptr<TreeNode> root(new TreeNode);
     // Give the parent 100 child nodes.
     for (size_t i = 0; i < 100; ++i) {
         std::shared_ptr<TreeNode> child(new TreeNode);
         root->children.push_back(child);
         child->parent = root;
     }
     // Reset the root shared pointer, destroying the root object, and
     // subsequently its child nodes.
     root.reset();
}
As child nodes are added to the root node's children, their std ::weak_ptr member parent is set to the root node.
The member parent is declared as a weak pointer as opposed to a shared pointer such that the root node's
reference count is not incremented. When the root node is reset at the end of main(), the root is destroyed. Since
the only remaining std ::shared_ptr references to the child nodes were contained in the root's collection children,
all child nodes are subsequently destroyed as well.
Due to control block implementation details, shared_ptr allocated memory may not be released until shared_ptr
reference counter and weak_ptr reference counter both reach zero.
#include <memory>
int main()
{
     {
           std::weak_ptr<int> wk;
           {
               // std::make_shared is optimized by allocating only once
               // while std::shared_ptr<int>(new int(42)) allocates twice.
               // Drawback of std::make_shared is that control block is tied to our integer
               std::shared_ptr<int> sh = std::make_shared<int>(42);
               wk = sh;
               // sh memory should be released at this point...
           }
           // ... but wk is still alive and needs access to control block
      }
      // now memory is released (sh and wk)
}
Since std ::weak_ptr does not keep its referenced object alive, direct data access through a std ::weak_ptr is not
possible. Instead it provides a lock() member function that attempts to retrieve a std ::shared_ptr to the
referenced object: