print(5);
And you might need to give your compiler some clues, like:
print(static_cast<double>(5));
print(static_cast<int>(5));
print(5.0);
Some care also needs to be taken when writing overloads that accept optional parameters:
// WRONG CODE
void print(int numl, int num2 = 0) //num2 defaults to 0 if not included
{
     std::cout << "These are ints: << num1 << " and " << num2 << std::endl;
}
void print(int num)
{
     std::cout << "This is an int: " << num << std::endl;
}
Because there's no way for the compiler to tell if a call like print(17) is meant for the first or second function
because of the optional second parameter, this will fail to compile.
Section 36.2: Return Type in Function Overloading
Note that you cannot overload a function based on its return type. For example:
// WRONG CODE
std::string getValue()
{
   return "hello";
}
int getValue()
{
   return 0;
}
int x = getValue();
This will cause a compilation error as the compiler will not be able to work out which version of getValue to call,
even though the return type is assigned to an int.
Section 36.3: Member Function cv-qualifier Overloading
Functions within a class can be overloaded for when they are accessed through a cv-qualified reference to that
class; this is most commonly used to overload for const, but can be used to overload for volatile and const
volatile, too. This is because all non-static member functions take this as a hidden parameter, which the cv-
qualifiers are applied to. This is most commonly used to overload for const, but can also be used for volatile and
const volatile.
This is necessary because a member function can only be called if it is at least as cv-qualified as the instance it's
called on. While a non-const instance can call both const and non-const members, a const instance can only call
const members. This allows a function to have different behaviour depending on the calling instance's cv-qualifiers,
and allows the programmer to disallow functions for an undesired cv-qualifier(s) by not providing a version with
that qualifier(s).