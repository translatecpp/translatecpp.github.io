Comment markers used to disable code
During development, comments can also be used to quickly disable portions of code without deleting it. This is
often useful for testing or debugging purposes, but is not good style for anything other than temporary edits. This
is often referred to as "commenting out".
Similarly, keeping old versions of a piece of code in a comment for reference purposes is frowned upon, as it
clutters files while offering little value compared to exploring the code's history via a versioning system.
Section 1.3: The standard C++ compilation process
Executable C++ program code is usually produced by a compiler.
A compiler is a program that translates code from a programming language into another form which is (more)
directly executable for a computer. Using a compiler to translate code is called compilation.
C++ inherits the form of its compilation process from its "parent" language, C. Below is a list showing the four major
steps of compilation in C++:
   1. The C++ preprocessor copies the contents of any included header files into the source code file, generates
      macro code, and replaces symbolic constants defined using #define with their values.
   2.  The expanded source code file produced by the C++ preprocessor is compiled into assembly language
      appropriate for the platform.
   3.  The assembler code generated by the compiler is assembled into appropriate object code for the platform.
   4.  The object code file generated by the assembler is linked together with the object code files for any library
      functions used to produce an executable file.
    •  Note: some compiled code is linked together, but not to create a final program. Usually, this "linked" code
      can also be packaged into a format that can be used by other programs. This "bundle of packaged, usable
      code" is what C++ programmers refer to as a library.
Many C++ compilers may also merge or un-merge certain parts of the compilation process for ease or for additional
analysis. Many C++ programmers will use different tools, but all of the tools will generally follow this generalized
process when they are involved in the production of a program.
The link below extends this discussion and provides a nice graphic to help. [1]:
http://faculty.cs.niu.edu/~mcmahon/CS241/Notes/compile.html
Section 1.4: Function
A function is a unit of code that represents a sequence of statements.
Functions can accept arguments or values and return a single value (or not). To use a function, a function call is
used on argument values and the use of the function call itself is replaced with its return value.
Every function has a type signature -- the types of its arguments and the type of its return type.
Functions are inspired by the concepts of the procedure and the mathematical function.
    •  Note: C++ functions are essentially procedures and do not follow the exact definition or rules of
      mathematical functions.
Functions are often meant to perform a specific task. and can be called from other parts of a program. A function
must be declared and defined before it is called elsewhere in a program.