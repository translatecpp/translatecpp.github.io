Section 94.1: Covariant result version of the base example,
static type checking
// 2. Covariant result version of the base example, static type checking.
class Top
{
public:
    virtual Top* clone() const = 0;
    virtual ~Top() = default; // Necessary for 'delete' via Top*.
};
class D : public Top
{
public:
      D* /* ? Covariant return */ clone() const override
      { return new D( *this ); }
};
class DD : public D
{
private:
     int answer_ = 42;
public:
     int answer() const
     { return answer_;}
     DD* /* ? Covariant return */ clone() const override
     { return new DD( *this ); }
};
#include <iostream>
using namespace std;
int main()
{
     DD* pi = new DD();
     DD* p2 = p1->clone();
     // Correct dynamic type DD for *p2 is guaranteed by the static type checking.
     cout << p2->answer() << endl;         // "42"
     delete p2;
     delete pi;
}
Section 94.2: Covariant smart pointer result (automated
cleanup)
// 3. Covariant smart pointer result (automated cleanup).
#include <memory>
using std::unique_ptr;
template< class Type >
auto up( Type* p ) { return unique_ptr<Type>( p ); }