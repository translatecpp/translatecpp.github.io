   // invoke a function with stored arguments
   call_fn(fn, t);
}
Live
Output:
foo_fn called. x = 1 y = 5 z = 10 res=16
Section 53.5: std::function with lambda and std::bind
#include <iostream>
#include <functional>
using std::placeholders ::_1; // to be used in std::bind example
int stdf_foobar (int x, std::function<int(int)> moo)
{
     return x + moo(x); // std::function moo called
}
int foo (int x) { return 2+x; }
int foo_2 (int x, int y) { return 9*x + y; }
int main()
{
     int a = 2;
     /* Function pointers */
     std::cout << stdf_foobar(a, &foo) << std::endl; // 6 ( 2 + (2+2) )
     // can also be: stdf_foobar(2, foo)
})
   /* Lambda expressions */
   /* An unnamed closure from a lambda expression can be
   * stored in a std::function object:
   */
   int capture_value = 3;
   std::cout << stdf_foobar(a,
                                            [capture_value](int param) -> int { return 7 + capture_value * param;
             << std ::endl;
   // result: 15 == value + (7 * capture_value * value) == 2 + (7 + 3 * 2)
     /* std::bind expressions */
     /* The result of a std::bind expression can be passed.
      * For example by binding parameters to a function pointer call:
      */
     int b = stdf_foobar(a, std::bind(foo_2, _1, 3));
     std::cout << b << std::endl;
     // b == 23 == 2 + ( 9*2 + 3 )
     int c = stdf_foobar(a, std::bind(foo_2, 5, _1));
     std::cout << c << std::endl;
     // c == 49 == 2 + ( 9*5 + 2 )
      return 0;
}