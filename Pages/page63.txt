     // Store data here
     std ::string data;
     // Convert object to string
     operator std::string const&() const {return data;}
     // Read a line from a stream.
     friend std::istream& operator>>(std::istream& stream, Line& line)
     {
          return std::getline(stream, line.data);
     }
};
     std::ifstream file("file3.txt");
     // Read the lines of a file into a container.
     std::vector<std::string> v(std::istream_iterator<Line>{file},
                                          std::istream_iterator<Line>{});
Section 13.10: Copying a file
std::ifstream src("source_filename", std::ios::binary);
std::ofstream dst("dest_filename", std::ios::binary);
dst << src.rdbuf();
Version > C++17
With C++17 the standard way to copy a file is including the <filesystem> header and using copy file:
std::fileystem::copy_file("source_filename", "dest_filename");
The filesystem library was originally developed as boost. filesystem and finally merged to ISO C++ as of C++17.
Section 13.11: Closing a file
Explicitly closing a file is rarely necessary in C++, as a file stream will automatically close its associated file in its
destructor. However, you should try to limit the lifetime of a file stream object, so that it does not keep the file
handle open longer than necessary. For example, this can be done by putting all file operations into an own scope
({}):
std::string const prepared_data = prepare_data();
{
     // Open a file for writing.
     std ::ofstream output("foo.txt");
     // Write data.
     output << prepared_data;
}  // The ofstream will go out of scope here.
    // Its destructor will take care of closing the file properly.
Calling close() explicitly is only necessary if you want to reuse the same fstream object later, but don't want to
keep the file open in between:
// Open the file "foo.txt" for the first time.
std ::ofstream output("foo.txt");
// Get some data to write from somewhere.
std::string const prepared_data = prepare_data();