Section 127.1: Hello TCP Client
This program is complimentary to Hello TCP Server program, you can run either of them to check the validity of
each other. The program flow is quite common with Hello TCP server, so make sure to take a look at that too.
Here's the code -
#include <cstring>
#include <iostream>
#include <string>
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
int main(int argc, char *argv[])
{
     // Now we're taking an ipaddress and a port number as arguments to our program
     if (argc != 3) {
          std::cerr << "Run program as 'program <ipaddress> <port>'\n";
          return -1;
     }
     auto &ipAddress = argv[1];
     auto &portNum = argv[2];
     addrinfo hints, *p;
     memset(&hints, 0, sizeof(hints));
     hints.ai_family = AF_UNSPEC;
     hints.ai_socktype = SOCK_STREAM;
     hints.ai_flags = AI_PASSIVE;
     int gAddRes = getaddrinfo(ipAddress, portNum, &hints, &p);
     if (gAddRes != 0) {
          std::cerr << gai_strerror(gAddRes) << "\n";
          return -2;
     }
     if (p == NULL) {
          std::cerr << "No addresses found\n";
          return -3;
     }
     // socket() call creates a new socket and returns it's descriptor
     int sockFD = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
     if (sockFD == -1) {
          std::cerr << "Error while creating socket\n";
          return -4;
     }
     // Note: there is no bind() call as there was in Hello TCP Server
     // why? well you could call it though it's not necessary
     // because client doesn't necessarily has to have a fixed port number
     // so next call will bind it to a random available port number