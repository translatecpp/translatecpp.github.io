Chapter 13: File I/O
C++ file I/O is done via streams. The key abstractions are:
std:: istream for reading text.
std ::ostream for writing text.
std ::streambuf for reading or writing characters.
Formatted input uses operator>>.
Formatted output uses operator<<.
Streams use std ::locale, e.g., for details of the formatting and for translation between external encodings and the
internal encoding.
More on streams: <iostream> Library
Section 13.1: Writing to a file
There are several ways to write to a file. The easiest way is to use an output file stream (ofstream) together with the
stream insertion operator (<<):
std::ofstream os("foo.txt");
if(os.is_open()) {
     os << "Hello World!";
}
Instead of <<, you can also use the output file stream's member function write():
std::ofstream os("foo.txt");
if(os.is_open()) {
     char data[] = "Foo";
     // Writes 3 characters from data -> "Foo".
     os.write(data, 3);
}
After writing to a stream, you should always check if error state flag badbit has been set, as it indicates whether the
operation failed or not. This can be done by calling the output file stream's member function bad():
os << "Hello Badbit!"; // This operation might fail for any reason.
if (os.bad())
     // Failed to write!
Section 13.2: Opening a file
Opening a file is done in the same way for all 3 file streams (ifstream, ofstream, and fstream).
You can open the file directly in the constructor:
std::ifstream ifs("foo.txt"); // ifstream: Opens file "foo.txt" for reading only.
std::ofstream ofs("foo.txt"); // ofstream: Opens file "foo.txt" for writing only.