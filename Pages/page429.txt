Chapter 79: Curiously Recurring Template
Pattern (CRTP)
A pattern in which a class inherits from a class template with itself as one of its template parameters. CRTP is
usually used to provide static polymorphism in C++.
Section 79.1: The Curiously Recurring Template Pattern
(CRTP)
CRTP is a powerful, static alternative to virtual functions and traditional inheritance that can be used to give types
properties at compile time. It works by having a base class template which takes, as one of its template parameters,
the derived class. This permits it to legally perform a static_cast of its this pointer to the derived class.
Of course, this also means that a CRTP class must always be used as the base class of some other class. And the
derived class must pass itself to the base class.
Version > C++14
Let's say you have a set of containers that all support the functions begin() and end(). The standard library's
requirements for containers require more functionality. We can design a CRTP base class that provides that
functionality, based solely on begin() and end():
#include <iterator>
template <typename Sub>
class Container {
private:
     // self() yields a reference to the derived type
     Sub& self() { return *static_cast<Sub*>(this); }
     Sub const& self() const { return *static_cast<Sub const*>(this); }
   public:
     decltype(auto) front() {
        return *self().begin();
     }
     decltype(auto) back() {
        return *std::prev(self().end());
     }
     decltype(auto) size() const {
        return std::distance(self().begin(), self().end());
     }
                                         decltype(auto) operator[](std::size_t i) {
                                         return *std::next(self().begin(), i);
     }
};
The above class provides the functions front(), back(), size(), and operator[ ] for any subclass which provides
begin() and end(). An example subclass is a simple dynamically allocated array:
#include <memory>
// A dynamically allocated array
template <typename T>
class DynArray : public Container<DynArray<T>> {
   public: