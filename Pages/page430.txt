     DynArray(std::size_t size)
       : size_{size},
       data_{std::make_unique<T[]>(size_)}
     { }
     T* begin() { return data_.get(); }
     const T* begin() const { return data_.get(); }
     T* end() { return data_.get() + size_; }
     const T* end() const { return data_.get() + size_; }
   private:
     std::size_t size_;
     std::unique_ptr<T[]> data_;
};
Users of the DynArray class can use the interfaces provided by the CRTP base class easily as follows:
DynArray<int> arr(10);
arr.front() = 2;
arr[2] = 5;
assert(arr.size() == 10);
Usefulness: This pattern particularly avoids virtual function calls at run-time which occur to traverse down the
inheritance hierarchy and simply relies on static casts:
DynArray<int> arr(10);
DynArray<int>::Base & base = arr;
base.begin(); // no virtual calls
The only static cast inside the function begin() in the base class Container<DynArray<int>> allows the compiler to
drastically optimize the code and no virtual table look up happens at runtime.
Limitations: Because the base class is templated and different for two different DynArrays it is not possible to
store pointers to their base classes in an type-homogenous array as one could generally do with normal inheritance
where the base class is not dependent on the derived type:
class A {};
class B: public A{};
A* a = new B;
Section 79.2: CRTP to avoid code duplication
The example in Visitor Pattern provides a compelling use-case for CRTP:
struct IShape
{
     virtual ~IShape() = default;
     virtual void accept(IShapeVisitor&) const = 0;
};
struct Circle : IShape
{
      // ...
      // Each shape has to implement this method the same way