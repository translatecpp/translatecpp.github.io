      C_container* c_cont = new C_container;
      delete c_cont; // Compile ERROR: C has no accessible destructor
}
Version > c++11
In C++11, a developer can override this behavior by preventing the compiler from providing a default destructor.
class C{
int m;
public:
      ~C() = delete; // does NOT have implicit destructor
};
void f{
      C c1 ;
} // Compile ERROR: C has no destructor
Furthermore, a developer may also be explicit about wanting the compiler to provide a default destructor.
class C{
int m;
public:
      ~C() = default; // saying explicitly it does have implicit/empty destructor
};
void f(){
      C c1 ;
} // C has a destructor -- c1 properly destroyed
Version > c++11
You can determine whether a type has a destructor (or is a primitive type) using std:: is_destructible from
<type_traits>:
class C1{ };
class C2{ public: ~C2() = delete };
class C3 : public C2{ };
using std::cout; using std::boolalpha; using std::endl;
using std::is_destructible;
cout <<   boolalpha << is_destructible<int>() << endl; // prints true
cout <<   boolalpha << is_destructible<C1>() << endl; // prints  true
cout <<   boolalpha << is_destructible<C2>() << endl; // prints false
cout <<   boolalpha << is_destructible<C3>() << endl; // prints false
Section 41.3: Copy and swap
If you're writing a class that manages resources, you need to implement all the special member functions (see Rule
of Three/Five/Zero). The most direct approach to writing the copy constructor and assignment operator would be:
person(const person &other)
     : name(new char[std::strlen(other.name) + 1])
     , age(other.age)
{
     std::strcpy(name, other.name);
}
person& operator=(person const& rhs) {
if (this != &other) {
delete [] name;