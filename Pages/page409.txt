Projects which use #pragma once must be modified to be standard-compliant.
With some compilers - particularly those that employ precompiled headers - #pragma once can result in a
considerable speedup of the compilation process. Similarly, some preprocessors achieve speedup of compilation
by tracking which headers have employed include guards. The net benefit, when both #pragma once and include
guards are employed, depends on the implementation and can be either an increase or decrease of compilation
times.
#pragma once combined with include guards was the recommended layout for header files when writing MFC
based applications on windows, and was generated by Visual Studio's add class, add dialog, add windows wizards.
Hence it is very common to find them combined in C++ Windows Applicants.
Section 75.8: Preprocessor error messages
Compile errors can be generated using the preprocessor. This is useful for a number of reasons some of which
include, notifying a user if they are on an unsupported platform or an unsupported compiler.
e.g. Return Error if gcc version is 3.0.0 or earlier.
#if __GNUC__ < 3
#error "This code requires gcc > 3.0.0"
#endif
e.g. Return Error if compiling on an Apple computer.
#ifdef __APPLE__
#error "Apple products are not supported in this release"
#endif