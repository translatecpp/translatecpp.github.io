   // array_view is plain old data, so default copy:
   array_view(array_view const&)=default;
   // generates a null, empty range:
   array_view()=default;
   // final constructor:
   array_view(T* s, T* f):b(s),e(f) {}
   // start and length is useful in my experience:
   array_view(T* s, std::size_t length):array_view(s, s+length) {}
   // SFINAE constructor that takes any .data() supporting container
   // or other range in one fell swoop:
   template<class Src,
     std::enable_if_t< compatible_data<std::remove_reference_t<Src>&, T >{}, int>* =nullptr,
     std::enable_if_t< !std::is_same<std::decay_t<Src>, array_view >{}, int>* =nullptr
   >
   array_view( Src&& src ):
     array_view( src.data(), src.size() )
   {}
   // array constructor:
   template<std::size_t N>
   array_view( T(&arr)[N] ):array_view(arr, N) {}
   // initializer list, allowing {} based:
   template<class U,
     std::enable_if_t< std::is_same<const U, T>{}, int>* =nullptr
   >
   array_view( std::initializer_list<U> il ):array_view(il.begin(), il.end()) {}
};
an array_view takes any container that supports .data() returning a pointer to T and a .size() method, or an
array, and erases it down to being a random-access range over contiguous Ts.
It can take a std ::vector<T>, a std ::string<T> a std ::array<T, N> a T[37], an initializer list (including {} based
ones), or something else you make up that supports it (via T* x.data() and size_t x.size()).
In this case, the data we can extract from the thing we are erasing, together with our "view" non-owning state,
means we don't have to allocate memory or write custom type-dependent functions.
Live example.
An improvement would be to use a non-member data and a non-member size in an ADL-enabled context.
Section 90.5: Type erasing type erasure with std::any
This example uses C++14 and boost ::any. In C++17 you can swap in std ::any instead.
The syntax we end up with is:
const auto print =
   make_any_method<void(std::ostream&)>([](auto&& p, std::ostream& t){ t << p << "\n"; });
super_any<decltype(print)> a = 7;
(a->*print)(std::cout);
which is almost optimal.