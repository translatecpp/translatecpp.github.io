Inspired by the Email Builder in C#, I've decided to make a C++ version here. An Email object is not necessarily a
very complex object, but it can demonstrate the pattern.
#include <iostream>
#include <sstream>
#include <string>
using namespace std;
// Forward declaring the builder
class EmailBuilder;
class Email
{
   public:
     friend class EmailBuilder; // the builder can access Email's privates
     static EmailBuilder make();
     string to_string() const {
     stringstream stream;
     stream << "from: " << m_from
     << "\nto: " << m_to
     << "\nsubject: " << m_subject
     << "\nbody: " << m_body;
     return stream.str();
     }
   private:
     Email() = default; // restrict construction to builder
     string m_from;
     string m_to;
     string m_subject;
     string m_body;
};
class EmailBuilder
{
   public:
     EmailBuilder& from(const string &from) {
         m_email.m_from = from;
         return *this;
     }
     EmailBuilder& to(const string &to) {
         m_email.m_to = to;
         return *this;
     }
     EmailBuilder& subject(const string &subject) {
         m_email.m_subject = subject;
         return *this;
     }
     EmailBuilder& body(const string &body) {
         m_email.m_body = body;
         return *this;
     }
     operator Email&&() {