Chapter 20: Friend keyword
Well-designed classes encapsulate their functionality, hiding their implementation while providing a clean,
documented interface. This allows redesign or change so long as the interface is unchanged.
In a more complex scenario, multiple classes that rely on each others' implementation details may be required.
Friend classes and functions allow these peers access to each others' details, without compromising the
encapsulation and information hiding of the documented interface.
Section 20.1: Friend function
A class or a structure may declare any function it's friend. If a function is a friend of a class, it may access all it's
protected and private members:
// Forward declaration of functions.
void friend_function();
void non_friend_function();
class PrivateHolder {
public:
     PrivateHolder(int val) : private_value(val) {}
private:
     int private_value;
     // Declare one of the function as a friend.
     friend void friend_function();
};
void non_friend_function() {
     PrivateHolder ph(10);
     // Compilation error: private_value is private.
     std::cout << ph.private_value << std::endl;
}
void friend_function() {
     // OK: friends may access private values.
     PrivateHolder ph(10);
     std::cout << ph.private_value << std::endl;
}
Access modifiers do not alter friend semantics. Public, protected and private declarations of a friend are equivalent.
Friend declarations are not inherited. For example, if we subclass PrivateHolder:
class PrivateHolderDerived : public PrivateHolder {
public:
     PrivateHolderDerived(int val) : PrivateHolder(val) {}
private:
     int derived_private_value = 0;
};
and try to access it's members, we'll get the following:
void friend_function() {
     PrivateHolderDerived pd(20);
     // OK.
     std::cout << pd.private_value << std::endl;
     // Compilation error: derived_private_value is private.