#include <iostream>
#include <utility>
#include <map>
int main()
{
     std::map<double, std::string> sorted_map;
     // Sort the names of the planets according to their size
    sorted_map.insert(std::make_pair(0.3829,
    sorted_map.insert(std::make_pair(0.9499,
    sorted_map.insert(std::make_pair(1,
    sorted_map.insert(std::make_pair(0.532,
    sorted_map.insert(std::make_pair(10.97,
    sorted_map.insert(std::make_pair(9.14,
    sorted_map.insert(std::make_pair(3.981,
    sorted_map.insert(std::make_pair(3.865,
    for (auto const& entry: sorted_map)
    {
                                                                             std::cout << entry.second << " (" <<
    }
}
"Mercury"));
"Venus"));
"Earth"));
"Mars"));
"Jupiter"));
"Saturn"));
"Uranus"));
"Neptune"));
entry.first << " of Earth's radius)" << '\n';
Output:
Mercury (0.3829 of Earth's radius)
Mars (0.532 of Earth's radius)
Venus (0.9499 of Earth's radius)
Earth (1 of Earth's radius)
Neptune (3.865 of Earth's radius)
Uranus (3.981 of Earth's radius)
Saturn (9.14 of Earth's radius)
Jupiter (10.97 of Earth's radius)
If entries with equal keys are possible, use multimap instead of map (like in the following example).
To sort elements in descending manner, declare the map with a proper comparison functor (std ::greater<>):
#include <iostream>
#include <utility>
#include <map>
int main()
{
     std::multimap<int, std::string, std::greater<int>> sorted_map;
     // Sort the names of animals in descending order of the number of legs
sorted_map.insert(std::make_pair(6,
sorted_map.insert(std::make_pair(4,
sorted_map.insert(std::make_pair(100
sorted_map.insert(std::make_pair(2,
sorted_map.insert(std::make_pair(0,
sorted_map.insert(std::make_pair(4,
sorted_map.insert(std::make_pair(8,
for (auto const& entry: sorted_map)
{
                                                                                 std::cout << entry.second << " (
}
"bug"));
"cat"));
"centipede"));
"chicken"));
"fish"));
"horse"));
"spider"));
has " << entry.first << " legs)" << '\n';