      virtual const std::type_info& target_type() const final override {
        return typeid(F);
      }
   };
};
template<class R, class...Args>
struct task<R(Args...)> {
   // semi-regular:
   task()=default;
   task(task&&)=default;
   // no copy
private:
   // aliases to make some SFINAE code below less ugly:
   template<class F>
   using call_r = std::result_of_t<F const&(Args...)>;
   template<class F>
   using is_task = std::is_same<std::decay_t<F>, task>;
public:
   // can be constructed from a callable F
   template<class F,
     // that can be invoked with Args... and converted-to-R:
     class= decltype( (R)(std::declval<call_r<F>>()) ),
     // and is not this same type:
     std::enable_if_t<!is_task<F>{}, int>* = nullptr
   >
   task(F&& f):
     m_pImpl( make_pimpl(std::forward<F>(f)) )
   {}
   // the meat: the call operator
   R operator()(Args... args)const {
          return m_pImpl->invoke( std::forward<Args>(args)... );
   }
   explicit operator bool() const {
     return (bool)m_pImpl;
   }
   void swap( task& o ) {
     std::swap( m_pImpl, o.m_pImpl );
   }
   template<class F>
   void assign( F&& f ) {
     m_pImpl = make_pimpl(std::forward<F>(f));
   }
   // Part of the std::function interface:
const std::type_info& target_type() const {
if (!*this) return typeid(void);
return m_pImpl->target_type();
   }
   template< class T >
   T* target() {
     return target_impl<T>();
   }
   template< class T >
const T* target() const {
return target_impl<T>();
   }
   // compare with nullptr :
   friend   bool operator==( std::nullptr_t, task const& self ) {  return  !self; }
   friend   bool operator==( task const& self, std::nullptr_t ) {  return  !self; }
   friend   bool operator!=( std::nullptr_t, task const& self ) {  return  !!self; }