Chapter 61: std::integer_sequence
The class template std ::integer_sequence<Type, Values...> represents a sequence of values of type Type where
Type is one of the built-in integer types. These sequences are used when implementing class or function templates
which benefit from positional access. The standard library also contains "factory" types which create ascending
sequences of integer values just from the number of elements.
Section 61.1: Turn a std::tuple<T...> into function parameters
A std ::tuple<T...> can be used to pass multiple values around. For example, it could be used to store a sequence
of parameters into some form of a queue. When processing such a tuple its elements need to be turned into
function call arguments:
#include <array>
#include <iostream>
#include <string>
#include <tuple>
#include <utility>
// ----------------------------------------------------------------------
// Example functions to be called:
void f(int i, std::string const& s) {
     std::cout << "f(" << i << ", " << s << ")\n";
}
void f(int i, double d, std::string const& s) {
     std::cout << "f(" << i << ", " << d << ", " << s << ")\n";
}
void f(char c, int i, double d, std::string const& s) {
     std::cout << "f(" << c << ", " << i << ", " << d << ", " << s << ")\n";
}
void f(int i, int j, int k) {
     std::cout << "f(" << i << ", " << j << ", " << k << ")\n";
}
// ----------------------------------------------------------------------
// The actual function expanding the tuple:
template <typename Tuple, std::size_t... I>
void process(Tuple const& tuple, std::index_sequence<I...>) {
f(std ::get<I>(tuple)...);
}
// The interface to call. Sadly, it needs to dispatch to another function
// to deduce the sequence of indices created from std::make_index_sequence<N>
template <typename Tuple>
void process(Tuple const& tuple) {
     process(tuple, std ::make_index_sequence<std::tuple_size<Tuple>::value>());
}
// ----------------------------------------------------------------------
int main() {
     process(std::make_tuple(1, 3.14, std::string("foo")));
     process(std::make_tuple('a', 2, 2.71, std::string("bar")));
     process(std::make_pair(3, std ::string("pair")));
     process(std::array<int, 3>{ 1, 2, 3 });
}
As long as a class supports std ::get<I>(object) and std ::tuple_size<T> ::value it can be expanded with the
above process() function. The function itself is entirely independent of the number of arguments.