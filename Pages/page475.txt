Small object optimization requires that we store an aligned storage buffer within the regular_type, and carefully
tweak the deleter of the ptr to only destroy the object and not delete it.
I would start at make_dtor_unique_ptr and teach it how to sometimes store the data in a buffer, and then in the
heap if no room in the buffer. That may be sufficient.
Section 90.3: Basic mechanism
Type erasure is a way to hide the type of an object from code using it, even though it is not derived from a common
base class. In doing so, it provides a bridge between the worlds of static polymorphism (templates; at the place of
use, the exact type must be known at compile time, but it need not be declared to conform to an interface at
definition) and dynamic polymorphism (inheritance and virtual functions; at the place of use, the exact type need
not be known at compile time, but must be declared to conform to an interface at definition).
The following code shows the basic mechanism of type erasure.
#include <ostream>
class Printable
{
public:
   template <typename T>
   Printable(T value) : pValue(new Value<T>(value)) {}
   ~Printable() { delete pValue; }
   void print(std::ostream &os) const { pValue->print(os); }
private:
   Printable(Printable const &)         /* in C++1x: =delete */; // not implemented
   void operator = (Printable const &) /* in C++1x: =delete */; // not implemented
   struct ValueBase
   {
       virtual ~ValueBase() = default;
       virtual void print(std::ostream &) const = 0;
   };
   template <typename T>
   struct Value : ValueBase
   {
       Value(T const &t) : v(t) {}
       virtual void print(std::ostream &os) const { os << v; }
       T v;
   };
   ValueBase *pValue;
};
At the use site, only the above definition need to be visible, just as with base classes with virtual functions. For
example:
#include <iostream>
void print_value(Printable const &p)
{
      p.print(std::cout);
}
Note that this is not a template, but a normal function that only needs to be declared in a header file, and can be
defined in an implementation file (unlike templates, whose definition must be visible at the place of use).
At the definition of the concrete type, nothing needs to be known about Printable, it just needs to conform to an