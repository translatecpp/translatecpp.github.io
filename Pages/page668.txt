Section 143.1: Introduction to performance
C and C++ are well known as high-performance languages - largely due to the heavy amount of code customization,
allowing a user to specify performance by choice of structure.
When optimizing it is important to benchmark relevant code and completely understand how the code will be used.
Common optimization mistakes include:
    • Premature optimization: Complex code may perform worse after optimization, wasting time and effort.
      First priority should be to write correct and maintainable code, rather than optimized code.
    • Optimization for the wrong use case: Adding overhead for the 1% might not be worth the slowdown for
      the other 99%
    • Micro-optimization: Compilers do this very efficiently and micro-optimization can even hurt the compilers
      ability to further optimize the code
Typical optimization goals are:
    • To do less work
    • To use more efficient algorithms/structures
    • To make better use of hardware
Optimized code can have negative side effects, including:
    • Higher memory usage
    • Complex code -being difficult to read or maintain
    • Compromised API and code design
Section 143.2: Empty Base Class Optimization
An object cannot occupy less than 1 byte, as then the members of an array of this type would have the same
address. Thus sizeof(T)>=1 always holds. It's also true that a derived class cannot be smaller than any of its base
classes. However, when the base class is empty, its size is not necessarily added to the derived class:
class Base {};
class Derived : public Base
{
public:
     int i;
};
In this case, it's not required to allocate a byte for Base within Derived to have a distinct address per type per
object. If empty base class optimization is performed (and no padding is required), then sizeof(Derived) ==
sizeof(int), that is, no additional allocation is done for the empty base. This is possible with multiple base classes
as well (in C++, multiple bases cannot have the same type, so no issues arise from that).
Note that this can only be performed if the first member of Derived differs in type from any of the base classes.
This includes any direct or indirect common bases. If it's the same type as one of the bases (or there's a common
base), at least allocating a single byte is required to ensure that no two distinct objects of the same type have the
same address.