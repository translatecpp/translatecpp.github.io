       enum can be named in this way even if hidden by another name.
       enum Foo { FOO };
       void Foo() {}
       Foo foo = FOO;       // ill-formed; Foo refers to the function
       enum Foo foo = FOO; // ok; Foo refers to the enum type
Version > C++11
    3. Introduces an opaque enum declaration, which declares an enum without defining it. It can either redeclare a
       previously declared enum, or forward-declare an enum that has not been previously declared.
       An enum first declared as scoped cannot later be declared as unscoped, or vice versa. All declarations of an
       enum must agree in underlying type.
       When forward-declaring an unscoped enum, the underlying type must be explicitly specified, since it cannot
       be inferred until the values of the enumerators are known.
       enum class Format; // underlying type is implicitly int
       void f(Format f);
       enum class Format {
            TEXT,
            PDF,
            OTHER,
       };
       enum Direction; // ill-formed; must specify underlying type
Section 21.3: struct
Interchangeable with class, except for the following differences:
    •  If a class type is defined using the keyword struct, then the default accessibility of bases and members is
      public rather than private.
    •  struct cannot be used to declare a template type parameter or template template parameter; only class
      can.
Section 21.4: union
   1. Introduces the definition of a union type.
      // Example is from POSIX
      union sigval {
           int sival_int;
           void *sival_ptr;
      };
   2.  Introduces an elaborated type specifier, which specifies that the following name is the name of a union type. If
      the union name has been declared already, it can be found even if hidden by another name. If the union
      name has not been declared already, it is forward-declared.
      union foo; // elaborated type specifier -> forward declaration
      class bar {