    addrinfo hints, *res, *p;    // we need 2 pointers, res to hold and p to iterate over
    memset(&hints, 0, sizeof(hints));
    // for more explanation, man socket
    hints.ai_family = AF_UNSPEC;       // don't specify which IP version to use yet
    hints.ai_socktype = SOCK_STREAM; // SOCK_STREAM refers to TCP, SOCK_DGRAM will be?
    hints.ai_flags = AI_PASSIVE;
    // man getaddrinfo
    int gAddRes = getaddrinfo(NULL, portNum, &hints, &res);
    if (gAddRes != 0) {
         std::cerr << gai_strerror(gAddRes) << "\n";
         return -2;
    }
    std::cout << "Detecting addresses" << std::endl;
    unsigned int numOfAddr = 0;
    char ipStr[INET6_ADDRSTRLEN]; // ipv6 length makes sure both ipv4/6 addresses can be stored
in this variable
    // Now since getaddrinfo() has given us a list of addresses
    // we're going to iterate over them and ask user to choose one
    // address for program to bind to
    for (p = res; p != NULL; p = p->ai_next) {
    void *addr;
    std::string ipVer;
         // if address is ipv4 address
         if (p->ai_family == AF_INET) {
         ipVer                 =  "IPv4";
             sockaddr_in  *ipv4 = reinterpret_cast<sockaddr_in  *>(p->ai_addr);
             addr              =  &(ipv4->sin_addr);
             ++numOfAddr;
         }
         // if address is
         else {
         ipVer
             sockaddr_in6
             addr
             ++numOfAddr;
         }
         // convert IPv4 and IPv6 addresses from binary to text form
         inet_ntop(p->ai_family, addr, ipStr, sizeof(ipStr));
         std::cout << "(" << numOfAddr << ") " << ipVer << " : " << ipStr
         << std ::endl;
    }
    // if no addresses found :(
    if (! numOfAddr) {
         std::cerr << "Found no host address to use\n";
         return -3;
    }
    // ask user to choose an address
    std::cout << "Enter the number of host address to bind with: ";
    unsigned int choice = 0;
    bool madeChoice = false;
ipv6 address
      = "IPv6";
*ipv6 = reinterpret_cast<sockaddr_in6 *>(p->ai_addr);
      = &(ipv6->sin6_addr);