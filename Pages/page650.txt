       RiSE4fun.
Section 138.4: Compiling with Visual C++ (Command Line)
For programmers coming from GCC or Clang to Visual Studio, or programmers more comfortable with the
command line in general, you can use the Visual C++ compiler from the command line as well as the IDE.
If you desire to compile your code from the command line in Visual Studio, you first need to set up the command
line environment. This can be done either by opening the Visual Studio Command Prompt/Developer Command
Prompt/x86 Native Tools Command Prompt/x64 Native Tools Command Prompt or similar (as provided by your
version of Visual Studio), or at the command prompt, by navigating to the VC subdirectory of the compiler's install
directory (typically \Program Files (x86)\Microsoft Visual Studio x\VC, where x is the version number (such
as 10.0 for 2010, or 14.0 for 2015) and running the VCVARSALL batch file with a command-line parameter specified
here.
Note that unlike GCC, Visual Studio doesn't provide a front-end for the linker (link.exe) via the compiler (cl.exe),
but instead provides the linker as a separate program, which the compiler calls as it exits. cl.exe and link.exe can
be used separately with different files and options, or cl can be told to pass files and options to link if both tasks
are done together. Any linking options specified to cl will be translated into options for link, and any files not
processed by cl will be passed directly to link. As this is mainly a simple guide to compiling with the Visual Studio
command line, arguments for link will not be described at this time; if you need a list, see here.
Note that arguments to cl are case-sensitive, while arguments to link are not.
[Be advised that some of the following examples use the Windows shell "current directory" variable, %cd%, when
specifying absolute path names. For anyone unfamiliar with this variable, it expands to the current working
directory. From the command line, it will be the directory you were in when you ran cl, and is specified in the
command prompt by default (if your command prompt is C:\src>, for example, then %cd% is C:\src\).]
Assuming a single source file named main. cpp in the current folder, the command to compile and link an
unoptimised executable (useful for initial development and debugging) is (use either of the following):
cl main.cpp
// Generates object file "main.obj".
// Performs linking with "main.obj".
// Generates executable "main.exe".
cl /Od main.cpp
// Same as above.
// "/Od" is the "Optimisation: disabled" option, and is the default when no /O is specified.
Assuming an additional source file "niam.cpp" in the same directory, use the following:
cl main.cpp niam.cpp
// Generates object files "main.obj" and "niam.obj".
// Performs linking with "main.obj" and "niam.obj".
// Generates executable "main.exe".
You can also use wildcards, as one would expect:
cl main.cpp src\*.cpp
// Generates object file "main.obj", plus one object file for each ".cpp" file in folder
//   "%cd%\src".
// Performs linking with "main.obj", and every additional object file generated.
// All object files will be in the current folder.