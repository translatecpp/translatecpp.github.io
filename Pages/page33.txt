      for( int i = 0; i < n; ++i ) { cout << a[i] << ' '; }
      cout << '\n';
  }
std ::vector is a standard library class template that provides the notion of a variable size array. It takes care of all
the memory management, and the buffer is contiguous so a pointer to the buffer (e.g. &v[0] or v.data()) can be
passed to API functions requiring a raw array. A vector can even be expanded at run time, via e.g. the push_back
member function that appends an item.
The complexity of the sequence of n push_back operations, including the copying or moving involved in the vector
expansions, is amortized O(n). "Amortized": on average.
Internally this is usually achieved by the vector doubling its buffer size, its capacity, when a larger buffer is needed.
E.g. for a buffer starting out as size 1, and being repeatedly doubled as needed for n=17 push_back calls, this
involves 1 + 2 + 4 + 8 + 16 = 31 copy operations, which is less than 2xn = 34. And more generally the sum of this
sequence can't exceed 2xn.
Compared to the dynamic size raw array example, this vector-based code does not require the user to supply (and
know) the number of items up front. Instead the vector is just expanded as necessary, for each new item value
specified by the user.
Section 9.6: A dynamic size matrix using std::vector for
storage
Unfortunately as of C++14 there's no dynamic size matrix class in the C++ standard library. Matrix classes that
support dynamic size are however available from a number of 3rd party libraries, including the Boost Matrix library
(a sub-library within the Boost library).
If you don't want a dependency on Boost or some other library, then one poor man's dynamic size matrix in C++ is
just like
 vector<vector<int>> m( 3, vector<int>( 7 ) );
... where vector is std ::vector. The matrix is here created by copying a row vector n times where n is the number
of rows, here 3. It has the advantage of providing the same m[y][x] indexing notation as for a fixed size raw array
matrix, but it's a bit inefficient because it involves a dynamic allocation for each row, and it's a bit unsafe because
it's possible to inadvertently resize a row.
A more safe and efficient approach is to use a single vector as storage for the matrix, and map the client code's (x,y)
to a corresponding index in that vector:
 // A dynamic size matrix using std::vector for storage.
 #include <algorithm> //
 #include <assert.h> //
 #include <initializer_list> //
 #include <vector> //
 #include <stddef.h> //
std::copy
assert
std::initializer_list
std::vector
ptrdiff_t
 namespace my {
     using Size = ptrdiff_t;
     using std::initializer_list;
     using std::vector;
     template< class Item >
     class Matrix