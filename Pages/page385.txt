                                                  auto l = [](int value) {
                                                  if (value < 10) {
                                                  return 1;
      } else {
          return 1.5;
      }
};
In this case you have to specify the return type explicitly:
// The return type is specified explicitly as 'double'
auto l = [](int value) -> double {
if (value < 10) {
return 1;
      } else {
           return 1.5;
      }
};
The rules for this match the rules for auto type deduction. Lambdas without explicitly specified return types never
return references, so if a reference type is desired it must be explicitly specified as well:
auto copy = [](X& x) { return x; };         // 'copy' returns an X, so copies its input
auto ref = [](X& x) -> X& { return x; }; // 'ref' returns an X&, no copy
Section 73.3: Capture by value
If you specify the variable's name in the capture list, the lambda will capture it by value. This means that the
generated closure type for the lambda stores a copy of the variable. This also requires that the variable's type be
copy-constructible:
int a = 0;
[a]() {
     return a; // Ok, 'a' is captured by value
};
Version < C++14
auto p = std::unique_ptr<T>(... );
[p]() {          // Compile error; 'unique_ptr' is not copy-constructible
     return p->createWidget();
};
From C++14 on, it is possible to initialize variables on the spot. This allows move only types to be captured in the
lambda.
Version > C++14
auto p = std::make_unique<T>(...);
[p = std ::move(p)]() {
      return p->createWidget();
};
Even though a lambda captures variables by value when they are given by their name, such variables cannot be
modified within the lambda body by default. This is because the closure type puts the lambda body in a declaration
ofoperator() const.