std::once_flag flag;
void do_something(){
       std::call_once(flag, [](){std::cout << "Happens once" << std::endl;});
       std::cout << "Happens every time" << std::endl;
}
Section 81.4: Object locking for efficient access
Often you want to lock the entire object while you perform multiple operations on it. For example, if you need to
examine or modify the object using iterators. Whenever you need to call multiple member functions it is generally
more efficient to lock the whole object rather than individual member functions.
For example:
class text_buffer
{
     // for readability/maintainability
     using mutex_type = std::shared_timed_mutex;
     using reading_lock = std::shared_lock<mutex_type>;
     using updates_lock = std::unique_lock<mutex_type>;
public:
     // This returns a scoped lock that can be shared by multiple
     // readers at the same time while excluding any writers
     [[nodiscard]]
     reading_lock lock_for_reading() const { return reading_lock(mtx); }
     // This returns a scoped lock that is exclusing to one
     // writer preventing any readers
     [[nodiscard]]
     updates_lock lock_for_updates() { return updates_lock(mtx); }
     char* data() { return buf; }
     char const* data() const { return buf; }
     char* begin() { return buf; }
     char const* begin() const { return buf; }
     char* end() { return buf + sizeof(buf); }
     char const* end() const { return buf + sizeof(buf); }
     std::size_t size() const { return sizeof(buf); }
private:
     char buf[1024];
     mutable mutex_type mtx; // mutable allows const objects to be locked
};
When calculating a checksum the object is locked for reading, allowing other threads that want to read from the
object at the same time to do so.
std::size_t checksum(text_buffer const& buf)
{
      std::size_t sum = 0xA44944A4;
      // lock the object for reading