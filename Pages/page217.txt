Without virtual member functions:
#include <iostream>
struct X {
    void f() { std::cout << "X::f()\n"; }
};
struct Y : X {
    void f() { std::cout << "Y::f()\n"; }
};
void call(X& a) {
     a.f();
}
int main() {
     X x;
     Y y;
     call(x); // outputs "X::f()"
     call(y); // outputs "X::f()"
}
Section 39.4: Behaviour of virtual functions in constructors
and destructors
The behaviour of virtual functions in constructors and destructors is often confusing when first encountered.
#include <iostream>
using namespace std;
class base {
public:
     base() { f("base constructor"); }
     ~base() { f("base destructor"); }
     virtual const char* v() { return "base::v()"; }
     void f(const char* caller) {
         cout << "When called from " << caller << ", "   << v() << " gets called.\n";
     }
};
class derived : public base {
public:
     derived() { f("derived constructor"); }
     ~derived() { f("derived destructor"); }
     const char* v() override { return "derived::v()"; }
};
int main() {
      derived d;
}
Output: