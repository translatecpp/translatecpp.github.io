Traditionally, a literal is an expression denoting a constant whose type and value are evident from its spelling. For
example, 42 is a literal, while x is not since one must see its declaration to know its type and read previous lines of
code to know its value.
However, C++11 also added user-defined literals, which are not literals in the traditional sense but can be used as a
shorthand for function calls.
Section 2.1: this
Within a member function of a class, the keyword this is a pointer to the instance of the class on which the
function was called. this cannot be used in a static member function.
                                                                                              struct S {
                                                                                              int x;
     S& operator=(const S& other) {
         x = other.x;
         // return a reference to the object being assigned to
         return *this;
     }
};
The type of this depends on the cv-qualification of the member function: if X::f is const, then the type of this
within f is const X*, so this cannot be used to modify non-static data members from within a const member
function. Likewise, this inherits volatile qualification from the function it appears in.
Version > C++11
this can also be used in a brace-or-equal-initializer for a non-static data member.
struct S;
struct T {
      T(const S* s);
                                                                                                                            // ...
};
                                                                                                                       struct S {
                                                                                                                            // ...
      T t{this};
};
this is an rvalue, so it cannot be assigned to.
Section 2.2: Integer literal
An integer literal is a primary expression of the form
    •  decimal-literal
It is a non-zero decimal digit (1, 2, 3, 4, 5, 6, 7, 8, 9), followed by zero or more decimal digits (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
int d = 42;
    •  octal-literal
It is the digit zero (0) followed by zero or more octal digits (0, 1, 2, 3, 4, 5, 6, 7)