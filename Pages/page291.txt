     the same key.
        std ::map< int , int > mp{ {1, 2}, {3, 4}, {6, 5}, {8, 9}, {3, 4}, {6, 7} };
        if(mp.count(3) > 0) // 3 exists as a key in map
            std::cout << "The key exists!" << std::endl; // This line would be executed.
        else
            std::cout << "The key does not exist!" << std::endl;
      If you only care whether some element exists, find is strictly better: it documents your intent and, for
      multimaps, it can stop once the first matching element has been found.
    • In the case of std ::multimap, there could be several elements having the same key. To get this range, the
      equal_range() function is used which returns std ::pair having iterator lower bound (inclusive) and upper
      bound (exclusive) respectively. If the key does not exist, both iterators would point to end().
         auto eqr = mmp.equal_range(6);
         auto st = eqr.first, en = eqr.second;
         for(auto it = st; it != en; ++it){
             std::cout << it->first << ", " << it->second << std::endl;
         }
             // prints: 6, 5
             //         6, 7
Section 51.4: Initializing a std::map or std::multimap
std ::map and std ::multimap both can be initialized by providing key-value pairs separated by comma. Key-value
pairs could be provided by either {key, value} or can be explicitly created by std ::make_pair(key, value). As
std ::map does not allow duplicate keys and comma operator performs right to left, the pair on right would be
overwritten with the pair with same key on the left.
std::multimap < int, std::string > mmp { std::make_pair(2, "stackoverflow"),
                                      std ::make_pair(1, "docs-beta"),
                                      std::make_pair(2, "stackexchange") };
// 1 docs-beta
// 2 stackoverflow
// 2 stackexchange
std::map < int, std::string > mp { std::make_pair(2, "stackoverflow"),
                                 std ::make_pair(1, "docs-beta"),
                                 std::make_pair(2, "stackexchange") };
// 1 docs-beta
// 2 stackoverflow
Both could be initialized with iterator.
// From std::map or std::multimap iterator
std::multimap< int , int > mmp{ {1, 2}, {3, 4}, {6, 5}, {8, 9}, {6, 8}, {3, 4},
                                {6, 7} };
                        // {1, 2}, {3, 4}, {3, 4}, {6, 5}, {6, 8}, {6, 7}, {8, 9}
auto it = mmp.begin();
std::advance(it,3); //moved cursor on first {6, 5}
std::map< int, int > mp(it, mmp.end()); // {6, 5}, {8, 9}
//From std::pair array
std::pair< int, int > arr[10];
arr[0] = {1, 3};