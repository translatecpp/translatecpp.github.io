Section 114.1: Self-made user-defined literal for binary
Despite you can write a binary number in C++14 like:
int number =0b0001'0101; // ==21
here comes a famous example with a self-made implementation for binary numbers:
Note: The whole template expanding program is running at compile time.
template< char FIRST, char... REST > struct binary
{
    static_assert( FIRST == '0' || FIRST == '1', "invalid binary digit" ) ;
    enum { value = ( ( FIRST - '0' ) << sizeof...(REST) ) + binary<REST...>::value } ;
};
template<> struct binary<'0'> { enum { value = 0 } ; };
template<> struct binary<'1'> { enum { value = 1 } ; };
// raw literal operator
template< char... LITERAL > inline
constexpr unsigned int operator "" _b() { return binary<LITERAL...>::value ; }
// raw literal operator
template< char... LITERAL > inline
constexpr unsigned int operator "" _B() { return binary<LITERAL...>::value ; }
#include <iostream>
int main()
{
     std::cout << 10101_B << ", " << 011011000111_b << '\n' ; // prints 21, 1735
}
Section 114.2: Standard user-defined literals for duration
Version > C++14
Those following duration user literals are declared in the namespace std ::literals ::chrono_literals, where both
literals and chrono_literals are inline namespaces. Access to these operators can be gained with using
namespace std::literals, using namespace std::chrono_literals, and using namespace
std ::literals::chrono_literals.
#include <chrono>
#include <iostream>
int main()
{
     using namespace std::literals::chrono_literals;
std: :chrono: :nanoseconds  t1 = 600ns 
std: :chrono: :microseconds t2 = 42us  
std: :chrono: :milliseconds t3 = 51ms  
std: :chrono: :seconds t4 = 61s;       
std: :chrono: :minutes t5 = 88min;     
