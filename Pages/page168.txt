   using copier_type=Copier;
   // also typedefs from unique_ptr
   using Base::Base;
   value_ptr( T const& t ):
     Base( std::make_unique<T>(t) ),
     Copier()
   {}
   value_ptr( T && t ):
     Base( std::make_unique<T>(std::move(t)) ),
     Copier()
   {}
   // almost-never-empty:
        value_ptr():
     Base( std::make_unique<T>() ),
     Copier()
   {}
   value_ptr( empty_ptr_t ) {}
   value_ptr( Base b, Copier c={} ):
     Base(std::move(b)),
     Copier(std::move(c))
   {}
   Copier const& get_copier() const {
     return *this;
   }
   value_ptr clone() const {
     return {
        Base(
         get_copier()(this->get()),
         this->get_deleter()
        ),
        get_copier()
     };
   }
   value_ptr(value_ptr&&)=default;
   value_ptr& operator=(value_ptr&&)=default;
   value_ptr(value_ptr const& o):value_ptr(o.clone()) {}
   value_ptr& operator=(value_ptr const&o) {
   if (o && *this) {
        // if we are both non-null, assign contents:
        **this = *o;
     } else {
        // otherwise, assign a clone (which could itself be null):
        *this = o.clone();
     }
     return *this;
   }
   value_ptr& operator=( T const& t ) {
     if (*this) {
        **this = t;
     } else {
        *this = value_ptr(t);
     }
     return *this;
   }
   value_ptr& operator=( T && t ) {
     if (*this) {