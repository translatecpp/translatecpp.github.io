During exception handling there is a common use case when you catch a generic exception from a low-level
function (such as a filesystem error or data transfer error) and throw a more specific high-level exception which
indicates that some high-level operation could not be performed (such as being unable to publish a photo on Web).
This allows exception handling to react to specific problems with high level operations and also allows, having only
error an message, the programmer to find a place in the application where an exception occurred. Downside of this
solution is that exception callstack is truncated and original exception is lost. This forces developers to manually
include text of original exception into a newly created one.
Nested exceptions aim to solve the problem by attaching low-level exception, which describes the cause, to a high
level exception, which describes what it means in this particular case.
std ::nested_exception allows to nest exceptions thanks to std ::throw_with_nested:
#include <stdexcept>
#include <exception>
#include <string>
#include <fstream>
#include <iostream>
struct MyException
{
     MyException(const std::string& message) : message(message) {}
     std::string message;
};
void print_current_exception(int level)
{
     try {
         throw;
     } catch (const std::exception& e) {
         std::cerr << std::string(level, ' ') << "exception: " << e.what() << '\n';
     } catch (const MyException& e) {
         std::cerr << std::string(level, ' ') << "MyException: " << e.message << '\n';
     } catch (...) {
         std::cerr << "Unkown exception\n";
     }
}
void print_current_exception_with_nested(int level =    0)
{
     try {
         throw;
     } catch (...) {
         print_current_exception(level);
     }
     try {
         throw;
     } catch (const std::nested_exception& nested) {
         try {
              nested.rethrow_nested();
         } catch (...) {
              print_current_exception_with_nested(level + 1); // recursion
         }
     } catch (...) {
         //Empty // End recursion
     }
}
// sample function that catches an exception and wraps it in a nested exception
void open_file(const std::string& s)