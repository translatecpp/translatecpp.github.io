   1.  To implement exception handling in C++, you use try, throw, and catch expressions.
   2.  First, use a try block to enclose one or more statements that might throw an exception.
   3.  A throw expression signals that an exceptional condition—often, an error—has occurred in a try block. You
     can use an object of any type as the operand of a throw expression. Typically, this object is used to
     communicate information about the error. In most cases, we recommend that you use the std::exception
     class or one of the derived classes that are defined in the standard library. If one of those is not appropriate,
     we recommend that you derive your own exception class from std::exception.
   4.  To handle exceptions that may be thrown, implement one or more catch blocks immediately following a try
     block. Each catch block specifies the type of exception it can handle.
    MyData md;
try {
   // Code that could throw an exception
   md = GetNetworkResource();
}
catch (const networkIOException& e) {
   // Code that executes when an exception of type
   // networkIOException is thrown in the try block
   // ...
   // Log error message in the exception object
   cerr << e.what();
}
catch (const myDataFormatException& e) {
   // Code that handles another exception type
   // ...
   cerr << e.what();
}
// The following syntax shows a throw expression
MyData GetNetworkResource()
{
   // ...
   if (IOSuccess == false)
       throw networkIOException("Unable to connect");
   // ...
   if (readError)
       throw myDataFormatException("Format error");
   // ...
}
    The code after the try clause is the guarded section of code. The throw expression throws—that is,
    raises—an exception. The code block after the catch clause is the exception handler. This is the handler
    that catches the exception that's thrown if the types in the throw and catch expressions are compatible.
    try {
   throw CSomeOtherException();
}
catch(...) {
   // Catch all exceptions - dangerous!!!
   // Respond (perhaps only partially) to the exception, then
   // re-throw to pass the exception to some other handler
   // ...
   throw;
}
    friend (C++)