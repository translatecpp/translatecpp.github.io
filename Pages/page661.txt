Chapter 140: More undefined behaviors in
C++
More examples on how C++ can go wrong.
Continuation from Undefined Behavior
Section 140.1: Referring to non-static members in initializer
lists
Referring to non-static members in initializer lists before the constructor has started executing can result in
undefined behavior. This results since not all members are constructed at this time. From the standard draft:
     §12.7.1: For an object with a non-trivial constructor, referring to any non-static member or base class of
     the object before the constructor begins execution results in undefined behavior.
Example
struct W { int j; };
struct X : public virtual W { };
struct Y {
int *p;
    X x;
    Y() : p(&x.j) { // undefined, x is not yet constructed
    }
};