See this article that explains why double checked locking will not work on C++:
What are all the common undefined behaviours that a C++ programmer should know about?
Section 113.2: Static deinitialization-safe singleton
There are times with multiple static objects where you need to be able to guarantee that the singleton will not be
destroyed until all the static objects that use the singleton no longer need it.
In this case std ::shared_ptr can be used to keep the singleton alive for all users even when the static destructors
are being called at the end of the program:
class Singleton
{
public:
     Singleton(Singleton const&) = delete;
     Singleton& operator=(Singleton const&) = delete;
     static std::shared_ptr<Singleton> instance()
     {
         static std::shared_ptr<Singleton> s{new Singleton};
         return s;
     }
private:
     Singleton() {}
};
NOTE: This example appears as an answer in the Q&A section here.
Section 113.3: Thread-safe Singeton
Version > C++11
The C++11 standards guarantees that the initialization of function scope objects are initialized in a synchronized
manner. This can be used to implement a thread-safe singleton with lazy initialization.
class Foo
{
public:
     static Foo& instance()
     {
         static Foo inst;
         return inst;
     }
private:
     Foo() {}
     Foo(const Foo&) = delete;
     Foo& operator =(const Foo&) = delete;
};
Section 113.4: Subclasses
class API
{
public:
     static API& instance();
     virtual ~API() {}