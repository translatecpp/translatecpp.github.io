Chapter 33: The This Pointer
Section 33.1: this Pointer
All non-static member functions have a hidden parameter, a pointer to an instance of the class, named this; this
parameter is silently inserted at the beginning of the parameter list, and handled entirely by the compiler. When a
member of the class is accessed inside a member function, it is silently accessed through this; this allows the
compiler to use a single non-static member function for all instances, and allows a member function to call other
member functions polymorphically.
struct ThisPointer {
     int i;
     ThisPointer(int ii);
     virtual void func();
     int get_i() const;
     void set_i(int ii);
};
ThisPointer::ThisPointer(int ii) : i(ii) {}
// Compiler rewrites as:
ThisPointer::ThisPointer(int ii) : this->i(ii) {}
// Constructor is responsible for turning allocated memory into 'this'.
// As the constructor is responsible for creating the object, 'this' will not be "fully"
// valid until the instance is fully constructed.
/* virtual */ void ThisPointer::func() {
if (some_external_condition) {
set_i(182);
     } else {
         i = 218;
     }
}
// Compiler rewrites as:
/* virtual */ void ThisPointer::func(ThisPointer* this) {
if (some_external_condition) {
this->set_i(182);
     } else {
         this->i = 218;
     }
}
int ThisPointer::get_i() const { return i; }
// Compiler rewrites as:
int ThisPointer::get_i(const ThisPointer* this) { return this->i; }
void ThisPointer::set_i(int ii) { i = ii; }
// Compiler rewrites as:
void ThisPointer::set_i(ThisPointer* this, int ii) { this->i = ii; }
In a constructor, this can safely be used to (implicitly or explicitly) access any field that has already been initialised,
or any field in a parent class; conversely, (implicitly or explicitly) accessing any fields that haven't yet been initialised,
or any fields in a derived class, is unsafe (due to the derived class not yet being constructed, and thus its fields
neither being initialised nor existing). It is also unsafe to call virtual member functions through this in the
constructor, as any derived class functions will not be considered (due to the derived class not yet being
constructed, and thus its constructor not yet updating the vtable).