class Matrix {
public:
     using value_type = T;
     Matrix() : values(COL * ROW) {}
     static size_t cols() { return COL; }
     static size_t rows() { return ROW; }
     const T& operator()(size_t x, size_t y) const { return values[y * COL + x]; }
     T& operator()(size_t x, size_t y) { return values[y * COL + x]; }
     template <typename E>
     Matrix<T, COL, ROW>& operator=(const E& expression) {
          for (std::size_t y = 0; y != rows(); ++y) {
                                                                                    for (std::size_t x = 0; x != cols(); ++x) {
                                                                                    values[y * COL + x] = expression(x, y);
              }
          }
          return *this;
     }
private:
     std::vector<T> values;
};