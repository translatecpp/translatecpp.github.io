     [](void* dest, void const* src){ *static_cast<T*>(dest) = *static_cast<T const*>(src); },
     [](void* dest, void* src){ *static_cast<T*>(dest) = std::move(*static_cast<T*>(src)); },
     [](void const* lhs, void const* rhs){ return *static_cast<T const*>(lhs) == *static_cast<T
const*>(rhs); },
     [](void const* lhs, void const* rhs) { return std::less<T>{}(*static_cast<T
const*>(lhs),*static_cast<T const*>(rhs)); },
     [](void const* self){ return std::hash<T>{}(*static_cast<T const*>(self)); },
     []()->decltype(auto){ return typeid(T); },
     [](void const* self){ return make_dtor_unique_ptr<T>(*static_cast<T const*>(self)); }
   };
}
template<class T>
regular_vtable const* get_regular_vtable() noexcept {
   static const regular_vtable vtable=make_regular_vtable<T>();
   return &vtable;
}
struct regular_type {
   using self=regular_type;
   regular_vtable const* vtable = 0;
   dtor_unique_ptr ptr{nullptr, [](void*){}};
   bool empty() const { return !vtable; }
   template<class T, class...Args>
   void emplace( Args&&... args ) {
     ptr = make_dtor_unique_ptr<T>(std::forward<Args>(args)...);
     if (ptr)
       vtable = get_regular_vtable<T>();
     else
       vtable = nullptr;
   }
   friend bool operator==(regular_type const& lhs, regular_type const& rhs) {
     if (lhs.vtable != rhs.vtable) return false;
     return lhs.vtable->equals( lhs.ptr.get(), rhs.ptr.get() );
   }
   bool before(regular_type const& rhs) const {
     auto const& lhs = *this;
     if (!lhs.vtable || !rhs.vtable)
       return std::less<regular_vtable const*>{}(lhs.vtable,rhs.vtable);
     if (lhs.vtable != rhs.vtable)
                                 return lhs.vtable->type().before(rhs.vtable->type());
                                 return lhs.vtable->order( lhs.ptr.get(), rhs.ptr.get() );
   }
   // technically friend bool operator< that calls before is also required
   std::type_info const* type() const {
     if (!vtable) return nullptr;
     return &vtable->type();
   }
   regular_type(regular_type&& o):
     vtable(o.vtable),
     ptr(std::move(o.ptr))
   {
     o.vtable = nullptr;
   }
   friend void swap(regular_type& lhs, regular_type& rhs){
     std::swap(lhs.ptr, rhs.ptr);
     std::swap(lhs.vtable, rhs.vtable);
   }
   regular_type& operator=(regular_type&& o) {
     if (o.vtable == vtable) {