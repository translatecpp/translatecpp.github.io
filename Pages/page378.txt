         }
};
int main()
{
     try {
         Transaction transaction("In main"); // RollBack
         Foo foo; // ~Foo commit its transaction.
         //...
         throw std:: runtime_error("Error");
     } catch (const std::exception& e) {
         std::cerr << "exception/main:" << e.what() << std::endl;
     }
}
Output:
In ~Foo: Commit
In main: Rollback
exception/main:Error
Section 72.6: Function Try Block for regular function
void function_with_try_block()
try
{
     // try block body
}
catch (...)
{
     // catch block body
}
Which is equivalent to
void function_with_try_block()
{
     try
     {
         // try block body
     }
     catch (...)
     {
         // catch block body
     }
}
Note that for constructors and destructors, the behavior is different as the catch block re-throws an exception
anyway (the caught one if there is no other throw in the catch block body).
The function main is allowed to have a function try block like any other function, but main's function try block will
not catch exceptions that occur during the construction of a non-local static variable or the destruction of any static
variable. Instead, std — terminate is called.
Section 72.7: Nested exception
Version > C++11